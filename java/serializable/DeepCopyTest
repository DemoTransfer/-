import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

public class DeepCopyTest {

	public static void main(String[] args) throws ClassNotFoundException, IOException {
		User user = new User();
		user.setId("user");

		User deepCopyUse = deepCopy(user);
		deepCopyUse.setId("deepCopyUse");

		System.out.println("user:" + user.toString());
		System.out.println("deepCopyUse:" + deepCopyUse);
	}

	/**
	 * deep copy
	 * 
	 * @param srcObject
	 * @return
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	@SuppressWarnings("unchecked")
	protected static <T> T deepCopy(T srcObject) throws IOException, ClassNotFoundException {
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
		objectOutputStream.writeObject(srcObject);

		ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
		ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
		return (T) objectInputStream.readObject();
	}
	
	/**
	 * serialize object
	 * 
	 * @param obejct
	 * @return
	 * @throws IOException
	 */
	public static byte[] serialize(Object obejct) throws IOException {
		try (ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
				ObjectOutputStream objectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream())) {
			objectOutputStream.writeObject(obejct);
			return byteArrayOutputStream.toByteArray();
		}
	}

	/**
	 * deserialize object
	 * 
	 * @param byteArray
	 * @param clazz
	 * @return
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	@SuppressWarnings("unchecked")
	public static <T> T deserialize(byte[] byteArray, Class<T> clazz) throws IOException, ClassNotFoundException {
		try (ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
				ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream)) {
			return (T) objectInputStream.readObject();
		}
	}

}

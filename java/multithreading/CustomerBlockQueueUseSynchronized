public class CustomerBlockQueueUseSynchronized<E> {

	/**
	 * 阻塞队列(synchronized)
	 */

	private final int blockQueueLimitSize;

	private final List<E> storyList;

	public CustomerBlockQueueUseSynchronized(int blockQueueLimitSize) {
		super();
		this.blockQueueLimitSize = blockQueueLimitSize;
		this.storyList = new LinkedList<E>();
	}

	public void put(E e) {
		while (true) {
			synchronized (storyList) {
				if (storyList.size() < blockQueueLimitSize) {
					System.out.println("put:" + e);
					storyList.add(e);
					return;
				}
			}
		}
	}

	public E take() {
		while (true) {
			synchronized (storyList) {
				if (storyList.size() > 0) {
					E remove = storyList.remove(0);
					System.out.println("take:" + remove);
					return remove;
				}
			}
		}
	}

	public static void main(String[] args) {
		CustomerBlockQueueUseSynchronized<Integer> customerBlockQueue = new CustomerBlockQueueUseSynchronized<Integer>(5);
		for (int i = 0; i < 50; i++) {
			final Integer m = i;
			new Thread(new Runnable() {

				@Override
				public void run() {
					customerBlockQueue.put(m);
				}
			}).start();
		}
		for (int i = 0; i < 50; i++) {
			new Thread(new Runnable() {

				@Override
				public void run() {
					customerBlockQueue.take();
				}
			}).start();
		}
	}

}

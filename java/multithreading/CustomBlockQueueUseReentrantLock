public class CustomerDeadLockUseReentrantLock {

	/**
	 * 使用ReentrantLock实现死锁
	 */
	
	/**
	 * 	jstack.exe print log
		Found one Java-level deadlock:
		=============================
		"lock12-Thread-4":
		  waiting for ownable synchronizer 0x000000076b100538, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),
		  which is held by "lock11-Thread-3"
		"lock11-Thread-3":
		  waiting for ownable synchronizer 0x000000076b100568, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),
		  which is held by "lock12-Thread-4"
		
		Java stack information for the threads listed above:
		===================================================
		"lock12-Thread-4":
			at sun.misc.Unsafe.park(Native Method)
			- parking to wait for  <0x000000076b100538> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
			at java.util.concurrent.locks.LockSupport.park(Unknown Source)
			at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)
			at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)
			at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)
			at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)
			at java.util.concurrent.locks.ReentrantLock.lock(Unknown Source)
			at com.*.redis.module.blockqueue.CustomerDeadLockUseReentrantLock$2.run(CustomerDeadLockUseReentrantLock.java:47)
			at java.lang.Thread.run(Unknown Source)
		"lock11-Thread-3":
			at sun.misc.Unsafe.park(Native Method)
			- parking to wait for  <0x000000076b100568> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
			at java.util.concurrent.locks.LockSupport.park(Unknown Source)
			at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)
			at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Unknown Source)
			at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Unknown Source)
			at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(Unknown Source)
			at java.util.concurrent.locks.ReentrantLock.lock(Unknown Source)
			at com.*.redis.module.blockqueue.CustomerDeadLockUseReentrantLock$1.run(CustomerDeadLockUseReentrantLock.java:26)
			at java.lang.Thread.run(Unknown Source)
		
		Found 1 deadlock.
	 */
	
	private static Lock lock11 = new ReentrantLock();

	private static Lock lock12 = new ReentrantLock();

	public static void main(String[] args) {
		
		new Thread(new Runnable() {

			@Override
			public void run() {
				lock11.lock();
				System.out.println(Thread.currentThread().getName() + "获取了lock11");

				try {
					Thread.sleep(1000);
				} catch (Exception e) {
					e.printStackTrace();
				}

				lock12.lock();
				System.out.println(Thread.currentThread().getName() + "获取了lock12");

				lock11.unlock();
				lock12.unlock();
			}
		}, "lock11-Thread-3").start();

		new Thread(new Runnable() {

			@Override
			public void run() {
				lock12.lock();
				System.out.println(Thread.currentThread().getName() + "获取了lock12");

				try {
					Thread.sleep(1000);
				} catch (Exception e) {
					e.printStackTrace();
				}

				lock11.lock();
				System.out.println(Thread.currentThread().getName() + "获取了lock11");

				lock12.unlock();
				lock11.unlock();
			}
		}, "lock12-Thread-4").start();

	}

}

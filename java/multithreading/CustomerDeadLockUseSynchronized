public class CustomerDeadLockUseSynchronized {

	/**
	 * 使用Synchronized实现死锁
	 */

	private static Object lock1 = new Object();

	private static Object lock2 = new Object();

	public static void main(String[] args) {

		new Thread(new Runnable() {

			@Override
			public void run() {
				System.out.println(Thread.currentThread().getName() + " start");

				synchronized (lock1) {
					try {
						Thread.sleep(300000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}

				synchronized (lock2) {
					System.out.println(Thread.currentThread().getName() + "获取到了锁->" + Thread.currentThread().getName());
				}

				System.out.println(Thread.currentThread().getName() + " end");
			}
		}, "lock1-Thread-1").start();

		new Thread(new Runnable() {

			@Override
			public void run() {
				System.out.println(Thread.currentThread().getName() + " start");

				synchronized (lock2) {
					try {
						Thread.sleep(500000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}

				synchronized (lock1) {
					System.out.println(Thread.currentThread().getName() + "获取到了锁->" + Thread.currentThread().getName());
				}

				System.out.println(Thread.currentThread().getName() + "end");
			}
		}, "lock1-Thread-2").start();

	}

}

public class CglibProxy implements MethodInterceptor {

	private Object object;

	public Object getInstance(final Object object) {
		this.object = object;

		Enhancer enhancer = new Enhancer();
		enhancer.setSuperclass(this.object.getClass());
		enhancer.setCallback(this);

		return enhancer.create();
	}

	@Override
	public Object intercept(Object object, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
		Object result = null;
		System.out.println("before speech todo something");
		try {
			result = methodProxy.invoke(this.object, objects);
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("after speech todo something");
		return result;
	}

	public static void main(String[] args) {
		Speecher speecher = new Speecher();
		CglibProxy cglibProxy = new CglibProxy();

		Speecher speecherCglibProxy = (Speecher) cglibProxy.getInstance(speecher);
		speecherCglibProxy.dance();
	}
  
}

public class DynamicProxyHandler implements InvocationHandler {

	private Speecher speecher;

	public DynamicProxyHandler(Speecher speecher) {
		super();
		this.speecher = speecher;
	}

	@Override
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		Object result = null;
		System.out.println("before speech todo something" + this.speecher.getName());
		try {
			result = method.invoke(this.speecher, args);
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("after speech todo something" + this.speecher.getName());
		return result;
	}

	public static void main(String[] args) {
		Speecher speecher = new Speecher();
		ISpeech speech = (ISpeech) Proxy.newProxyInstance(ISpeech.class.getClassLoader(), new Class[] { ISpeech.class },
				new DynamicProxyHandler(speecher));
		speech.speech();
	}
  
}

public class TreeOrderByRecursive {

	/**
	 * Preorder traversal, recursion: root, left, right order
	 * 
	 * @param root
	 */
	public static void preOrderByRecursive(BinaryTreeNode root) {
		if (null == root) {
			return;
		} else {
			System.out.print(root.getValue() + " ");

			preOrderByRecursive(root.getLeft());

			preOrderByRecursive(root.getRight());
		}
	}

	/**
	 * Middle order traversal, recursion: left, root, right order
	 * 
	 * @param root
	 */
	public static void midOrderByRecursive(BinaryTreeNode root) {
		if (null == root) {
			return;
		} else {
			midOrderByRecursive(root.getLeft());

			System.out.print(root.getValue() + " ");

			midOrderByRecursive(root.getRight());
		}
	}

	/**
	 * Back order recursion, recursion: left, right, root
	 * 
	 * @param root
	 */
	public static void postOrderBuRecursive(BinaryTreeNode root) {
		if (null == root) {
			return;
		} else {
			postOrderBuRecursive(root.getLeft());

			postOrderBuRecursive(root.getRight());

			System.out.print(root.getValue() + " ");
		}
	}

}

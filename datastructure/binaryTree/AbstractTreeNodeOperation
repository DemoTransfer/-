public abstract class AbstractTreeNodeOperation implements ITreeNodeOperation {

	@Override
	public List<BinaryTreeNode> createTree(Integer[] datas) {
		if (null == datas) {
			return Collections.emptyList();
		}

		// Convert array 2 node list
		List<BinaryTreeNode> binaryNodeList = new ArrayList<BinaryTreeNode>(datas.length);
		for (Integer item : datas) {
			binaryNodeList.add(new BinaryTreeNode(item));
		}

		// Sets the binary tree parent-child node relationship
		for (int index = 0; index < binaryNodeList.size() / 2 - 1; index++) {
			binaryNodeList.get(index).setLeft(binaryNodeList.get(index * 2 + 1));
			binaryNodeList.get(index).setRight(binaryNodeList.get(index * 2 + 2));
		}

		// Special processing of the last parent node
		int lastParentIndex = binaryNodeList.size() / 2 - 1;
		binaryNodeList.get(lastParentIndex).setLeft(binaryNodeList.get(lastParentIndex * 2 + 1));
		if (binaryNodeList.size() % 2 == 1) {
			binaryNodeList.get(lastParentIndex).setRight(binaryNodeList.get(lastParentIndex * 2 + 2));
		}

		return binaryNodeList;
	}

	@Override
	public void preOrder(BinaryTreeNode root) {
		// nothing
	}

	@Override
	public void midOrder(BinaryTreeNode root) {
		// nothing
	}

	@Override
	public void postOrder(BinaryTreeNode root) {
		// nothing
	}

}

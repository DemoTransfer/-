public class QuickSort {

	/**
	 * 快速排序 CSDN blog
	 * link:https://blog.csdn.net/u013412772/article/details/52303774
	 */

	/**
	 * 快速排序的具体实现过程有很多种，在这里只介绍一种：这种实现需要基准元素（并记录基准元素，即将基准元素赋予一个临时变量key）、 
	 * 和两个移动下标（从头开始的下标（头下标），从尾开始的下标（尾下标）），用于实现比较。
	 */

	/**
	 * 选择第一个元素作为基准，之后将这个基准和剩余的数组当中的元素进行比较，具体比较过程就是先将基准和最后一个元素比较，如果小于基准元素则交换，
	 * 否则尾下标自减一次
	 * ；再将头下标所指的元素和基准元素的值key比较，如果大于则交换，否则头下标自加一次。不断重复这个过程，一直到基准元素左边的值小于等于基准元素
	 * ，右边的值大于等于基准元素。
	 */

	public int data[];

	private int partition(int sortArray[], int low, int high) {

		int key = sortArray[low];

		while (low < high) {
			while (low < high && sortArray[high] >= key)
				--high;
			sortArray[low] = sortArray[high];

			while (low < high && sortArray[low] <= key)
				++low;
			sortArray[high] = sortArray[low];
		}
		sortArray[low] = key;
		return low;
	}

	public void sort(int sortArray[], int low, int hight) {
		if (low < hight) {
			int pivotpos = partition(data, low, hight);// 划分
			sort(sortArray, low, pivotpos - 1); // 依次对两个子表进行递归排序
			sort(sortArray, pivotpos + 1, hight);
		}
	}

	public void display() {
		for (int i = 0; i < data.length; i++) {
			System.out.print(data[i]);
			System.out.print(" ");
		}
	}

	public static void main(String[] args) {
		QuickSort qs = new QuickSort();

		int data[] = { 44, 22, 53, 8, 56, 463, 23, 45 };
		qs.data = data;

		qs.sort(data, 0, qs.data.length - 1);
		qs.display();
	}

}

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<!-- 指定当前POM版本 -->
	<modelVersion>4.0.0</modelVersion>

	<!-- 项目坐标信息 -->
	<!-- 项目主标识,用于定义当前项目属于的实习项目,格式与项目创建的包是一样的,公司域名反写 -->
	<groupId>com.demotransfer</groupId>

	<!-- 项目名或模块名或者项目名+模块名组成 -->
	<artifactId>datamanager</artifactId>

	<!-- maven打包方式,默认为jar,还有：pom,maven-plugin,war,rar,zip -->
	<packaging>war</packaging>

	<!-- 当前项目版本号,一般由三个数字组成,第一个0表示大版本号,第二个0表示分支版本号,第三个1表示小版本号 -->
	<!-- SNAPSHOT代表当前版本类型为快照版本,还有alpha内部版本\beta公测版本\release版本\ga正式版等 -->
	<version>0.0.1-SNAPSHOT</version>

	<!-- 项目描述名,url,详细描述,产生项目文档使用 -->
	<name>datamanager Maven Webapp</name>
	<url>http://maven.apache.org</url>

	<!-- 用在子模块中，实现对父模块的继承 -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.9.RELEASE</version>
	</parent>

	<dependencies>
		<!-- cas -->
		<dependency>
			<groupId>org.jasig.cas.client</groupId>
			<artifactId>cas-client-core</artifactId>
			<version>3.3.3</version>
		</dependency>
		<!-- httpclient -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
		</dependency>
		<!-- spring -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-servlet-api</artifactId>
			<version>7.0.42</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.40</version>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.0.15</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
		</dependency>
		<!-- excel操作mavens -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.9</version>
		</dependency>
		<dependency>
			<groupId>commons-configuration</groupId>
			<artifactId>commons-configuration</artifactId>
			<version>1.8</version>
		</dependency>
		<!-- 解析网页内容 -->
		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.7.3</version>
		</dependency>
		<dependency>
			<groupId>net.sourceforge.htmlunit</groupId>
			<artifactId>htmlunit</artifactId>
		</dependency>
	</dependencies>

	<!-- 构建插件 -->
	<build>
		<!-- Maven定制化打包后的包名 Maven默认的包名为:<finalName>${project.artifactId}-${project.version}</finalName> 
			定制化想要的包名,如加上时间戳:<finalName>${project.artifactId}-${maven.build.timestamp}</finalName> -->
		<finalName>datamanager</finalName>

		<!-- 将src/main/java目录下src/main/resources目录下适配通配符的文件也打包打进去. 因为默认src/main/java下打包时只有class文件,src/main/resources下打包时将各种xml，properites，xsd文件 
			等打包jar或者war里面,防止遗漏部分文件,可以在下面的标签设置 -->
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
			</resource>
		</resources>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<!-- 一般而言，target与source是保持一致的，但是， 有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法)， 
						会存在target不同于source的情况 -->
					<source>1.8</source> <!-- 源代码使用的JDK版本 -->
					<target>1.8</target> <!-- 需要生成的目标class文件的编译版本 -->
					<encoding>UTF-8</encoding><!-- 字符集编码 -->
				</configuration>
			</plugin>

			<!-- findbugs -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<configuration>
					<!-- <excludeFilterFile>tools/findbugs/findbugs-exclude.xml</excludeFilterFile> -->
					<threshold>High</threshold>
					<effort>Default</effort>
					<findbugsXmlOutput>true</findbugsXmlOutput>
					<findbugsXmlOutputDirectory>target/site/findbugs</findbugsXmlOutputDirectory>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
